// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`debug statements 1`] = `"const MyFunc = (): void => {};"`;

exports[`empty function 1`] = `"const InitGlobals = (): void => {};"`;

exports[`empty if 1`] = `
"const foo = (): void => {
	if (true) {}
	else if (true) {}
	else {}
};"
`;

exports[`empty loop 1`] = `
"const foo = (): void => {
	while (true) {
		while (true) {}
		while (true) {
			while (true) {}
		}
	}
};"
`;

exports[`globals 1`] = `
"
// my numbers
const testNumber = 7.12;

// my strings
let testString = \\"myString\\";

// stress tests
let myUnits: Array<unit> = [];
"
`;

exports[`ifthenelse 1`] = `
"const foo = (a: number, b: number): number => {
	if ((a < b)) {
		return a;
	} else if ((b < a)) {
		return b;
	} else {
		return (a + b) / 2;
	}
};"
`;

exports[`multiline comments 1`] = `
"/**
 * Blah blah blah
 * @param arg1 Blah blah blah
 */

const MyFunc = (arg1: string): void => {};"
`;

exports[`not 1`] = `
"const foo = (): boolean => {
	return !true;
};"
`;

exports[`simple 1`] = `
"//comment
let udg_blah: unit;

const myFunc = (i: number, b: boolean): void => {
	let someUnit = GetSummonedUnit();
	if (unit === null) {
		unit = CreateUnit(Player(0), FourCC(\\"hfoo\\"), 0, 0, 0);
		udg_blah = unit;
	}
	if (R2I(GetUnitX(unit)) < i) {
		ShowUnit(unit, b)
	}
	while (true) {
		if (i > 10) break;
		i = i + 1;
	}
};"
`;

exports[`variables 1`] = `
"const bj_PI = 3.14159;
const bj_RADTODEG = 180 / bj_PI;"
`;
